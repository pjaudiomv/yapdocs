[{"title":"Excluding a custom format from a Yap query","type":0,"sectionRef":"#","url":"blog/excluding-format-post","content":"It’s possible to exclude a result from Yap results by using a custom format. For example say you made a Temporary Closure format that had an ID of 2069. You could set in your config.php a custom query, which would exclude those in the response.","keywords":""},{"title":"Merging Yap Servers","type":0,"sectionRef":"#","url":"blog/merging-yap-post","content":"Since Yap 3.0.0 (released in March 2019), it’s been possible to use a single Yap server with multiple Twilio accounts. What this means is that a service body can handle the overhead of server management while another service body retains the management of phone numbers and billing. Yap 3 also introduced the concept of configuration precedence https://github.com/bmlt-enabled/yap/wiki/Configuration-Precedence. This creates the ability to manifest all kinds of powerful capability without requiring access to the config.php on the server (critical for this situation where server management is handled by someone else). It also has the ability to set a value at regional level while the hierarchy of the BMLT automatically cascades down to the member areas. Recently I had to migrate my regional yap server to the zonal server. Below is the process I followed, feel free to send an email to help@bmlt.app if you’d like more details. Consider whether you may want to take a backup and overwrite your existing Yap database, or make a copy with a new install and config to do side by side testing. You may also want to consider setting in the database config ahead of time or afterward. You may also want to transfer any other settings in your top level config.php to the Config settings in the admin portal. Keep in mind that service bodies will use the hierarchy, so if you set this as a regional level all the service bodies connected will inherit them. 1) Delete any configuration from the target yap server, use the server body IDs that would be the IDs that would be the query below: DELETE FROM config where service_body_id in (x [,x]); Copy 2) Begin an export from your source yap server, select only data and exclude the flags table. See the screenshot below. (Use a self-contained file) 3) After the file has been exported run the below on your system. In the below example, “export.sql” is the file exported from Step 2 above. cat export.sql | sed -e “s/([0-9]*,/(NULL,/g” &gt; export-mod.sql Copy 4) Import export-mod.sql into the target yap server. “export-mod.sql” is the output from the command run locally in Step 3 above. 5) Your phone numbers must have explicit service body overrides in order to pull configuration values from the database (you can use either override_service_body_id or override_service_body_config_id). One changes your service body for call routing and the other selects configuration, respectively.","keywords":""},{"title":"Congratulations!","type":0,"sectionRef":"#","url":"tutorial-basics/congratulations","content":"","keywords":""},{"title":"What's next?​","type":1,"pageTitle":"Congratulations!","url":"tutorial-basics/congratulations#whats-next","content":"Read the official documentation.Add a custom Design and LayoutAdd a search barFind inspirations in the Docusaurus showcaseGet involved in the Docusaurus Community "},{"title":"Create a Blog Post","type":0,"sectionRef":"#","url":"tutorial-basics/create-a-blog-post","content":"","keywords":""},{"title":"Create your first Post​","type":1,"pageTitle":"Create a Blog Post","url":"tutorial-basics/create-a-blog-post#create-your-first-post","content":"Create a file at blog/2021-02-28-greetings.md: blog/2021-02-28-greetings.md --- slug: greetings title: Greetings! authors: - name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png - name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png tags: [greetings] --- Congratulations, you have made your first post! Feel free to play around and edit this post as much you like. Copy A new blog post is now available at http://localhost:3000/blog/greetings. "},{"title":"Create a Document","type":0,"sectionRef":"#","url":"tutorial-basics/create-a-document","content":"","keywords":""},{"title":"Create your first Doc​","type":1,"pageTitle":"Create a Document","url":"tutorial-basics/create-a-document#create-your-first-doc","content":"Create a markdown file at docs/hello.md: docs/hello.md # Hello This is my **first Docusaurus document**! Copy A new document is now available at http://localhost:3000/docs/hello. "},{"title":"Configure the Sidebar​","type":1,"pageTitle":"Create a Document","url":"tutorial-basics/create-a-document#configure-the-sidebar","content":"Docusaurus automatically creates a sidebar from the docs folder. Add metadatas to customize the sidebar label and position: docs/hello.md --- sidebar_label: 'Hi!' sidebar_position: 3 --- # Hello This is my **first Docusaurus document**! Copy It is also possible to create your sidebar explicitly in sidebars.js: sidebars.js module.exports = { tutorialSidebar: [ { type: 'category', label: 'Tutorial', - items: [...], + items: ['hello'], }, ], }; Copy "},{"title":"Create a Page","type":0,"sectionRef":"#","url":"tutorial-basics/create-a-page","content":"","keywords":""},{"title":"Create your first React Page​","type":1,"pageTitle":"Create a Page","url":"tutorial-basics/create-a-page#create-your-first-react-page","content":"Create a file at src/pages/my-react-page.js: src/pages/my-react-page.js import React from 'react'; import Layout from '@theme/Layout'; export default function MyReactPage() { return ( &lt;Layout&gt; &lt;h1&gt;My React page&lt;/h1&gt; &lt;p&gt;This is a React page&lt;/p&gt; &lt;/Layout&gt; ); } Copy A new page is now available at http://localhost:3000/my-react-page. "},{"title":"Create your first Markdown Page​","type":1,"pageTitle":"Create a Page","url":"tutorial-basics/create-a-page#create-your-first-markdown-page","content":"Create a file at src/pages/my-markdown-page.md: src/pages/my-markdown-page.md # My Markdown page This is a Markdown page Copy A new page is now available at http://localhost:3000/my-markdown-page. "},{"title":"Deploy your site","type":0,"sectionRef":"#","url":"tutorial-basics/deploy-your-site","content":"","keywords":""},{"title":"Build your site​","type":1,"pageTitle":"Deploy your site","url":"tutorial-basics/deploy-your-site#build-your-site","content":"Build your site for production: npm run build Copy The static files are generated in the build folder. "},{"title":"Deploy your site​","type":1,"pageTitle":"Deploy your site","url":"tutorial-basics/deploy-your-site#deploy-your-site-1","content":"Test your production build locally: npm run serve Copy The build folder is now served at http://localhost:3000/. You can now deploy the build folder almost anywhere easily, for free or very small cost (read the Deployment Guide). "},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"tutorial-extras/manage-docs-versions","content":"","keywords":""},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"tutorial-extras/manage-docs-versions#create-a-docs-version","content":"Release a version 1.0 of your project: npm run docusaurus docs:version 1.0 Copy The docs folder is copied into versioned_docs/version-1.0 and versions.json is created. Your docs now have 2 versions: 1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs "},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"tutorial-extras/manage-docs-versions#add-a-version-dropdown","content":"To navigate seamlessly across versions, add a version dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', }, ], }, }, }; Copy The docs version dropdown appears in your navbar:  "},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"tutorial-extras/manage-docs-versions#update-an-existing-version","content":"It is possible to edit versioned docs in their respective folder: versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello "},{"title":"Setup","type":0,"sectionRef":"#","url":"general/setup","content":"Setup This will require that you have an SSL certificate installed on your webserver to transit a secure connection. This is required by Twilio. Create a new virtual application or add the yap code to an existing folder. You can always find the latest stable version here (be sure download the yap-x-x-x.zip file and not the source code): https://github.com/bmlt-enabled/yap/releases/latest. You can also try out or help test the latest bleeding edge features by installing one of the unreleased versions. The newest version would always be the highest numbered build. Once the application is configured you will need to customize the config.php file. There are several settings there that are documented in that file. There are a number of different ways to utilize the yap platform. You will need to (config.php) enter $twilio_account_sid and $twilio_auth_token. You can find this on your account dashboard. You can also use a different Twilio account using the admin portal under &quot;Service Bodies&quot;. Keep in mind that if a key or keys are set at any parent above, all child service bodies will inherit that key. In order to use a key, just specify override_service_body_id in your webhook with the applicable id. You will need to ensure that the following config.php parameters are set. They should be a service body admin that will be responsible for reading and writing data back to your BMLT. This will not work with the &quot;Server Administrator&quot; account. The user should be at the highest level of access in your BMLT hierarchy that you require access to. static $bmlt_username = &quot;&quot;; static $bmlt_password = &quot;&quot;; Copy Be sure to get a Google Maps API key. Specify this in config.php as the value for $google_maps_api_key. Make sure you have &quot;Google Maps Geocoding API&quot; and &quot;Google Maps Time Zone API&quot; enabled on your credentials. This key must be separate from your BMLT key with no server restrictions, this is safe because yap never passes the key client side. You can login into your Google API console here: https://console.cloud.google.com/apis/. This article may be useful https://bmlt.app/google-maps-api-keys-and-geolocation-issues/. Try testing that your application actually is functioning properly by opening a browser http://example.com/index.php. You will need to set up a Twilio account, and do the following. Purchase a phone number (typically you would buy one for your locale, tollfree is pretty much unnecessary these days). Configure that number to point to a Webook. It would be something like https://example.com/index.php. Version 3.x You will need to set up a new MySQL database. Be sure to set up backups on your database as well. Your hosting provider may cover this more. Once you've done that, set the following in your config.php. static $mysql_hostname = &quot;&quot;; static $mysql_username = &quot;&quot;; static $mysql_password = &quot;&quot;; static $mysql_database = &quot;&quot;; Copy You can test whether or not you are properly configured by going to https://example.com/upgrade-advisor.php. This will also run MySQL scripts to initialize/update your database. Make a call to your number and try it out. If there is a problem the debugger in the Twilio console will let you know why. Most likely you did not setup your config.php file correctly.","keywords":""},{"title":"Translate your site","type":0,"sectionRef":"#","url":"tutorial-extras/translate-your-site","content":"","keywords":""},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"tutorial-extras/translate-your-site#configure-i18n","content":"Modify docusaurus.config.js to add support for the fr locale: docusaurus.config.js module.exports = { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, }; Copy "},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"tutorial-extras/translate-your-site#translate-a-doc","content":"Copy the docs/intro.md file to the i18n/fr folder: mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md Copy Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French. "},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"tutorial-extras/translate-your-site#start-your-localized-site","content":"Start your site on the French locale: npm run start -- --locale fr Copy Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated. caution In development, you can only use one locale at a same time. "},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"tutorial-extras/translate-your-site#add-a-locale-dropdown","content":"To navigate seamlessly across languages, add a locale dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'localeDropdown', }, ], }, }, }; Copy The locale dropdown now appears in your navbar:  "},{"title":"Build your localized site​","type":1,"pageTitle":"Translate your site","url":"tutorial-extras/translate-your-site#build-your-localized-site","content":"Build your site for a specific locale: npm run build -- --locale fr Copy Or build your site to include all the locales at once: npm run build Copy "},{"title":"Markdown Features","type":0,"sectionRef":"#","url":"tutorial-basics/markdown-features","content":"","keywords":""},{"title":"Front Matter​","type":1,"pageTitle":"Markdown Features","url":"tutorial-basics/markdown-features#front-matter","content":"Markdown documents have metadata at the top called Front Matter: my-doc.md --- id: my-doc-id title: My document title description: My document description slug: /my-custom-url --- ## Markdown heading Markdown text with [links](./hello.md) Copy "},{"title":"Links​","type":1,"pageTitle":"Markdown Features","url":"tutorial-basics/markdown-features#links","content":"Regular Markdown links are supported, using url paths or relative file paths. Let's see how to [Create a page](/create-a-page). Copy Let's see how to [Create a page](./create-a-page.md). Copy Result: Let's see how to Create a page. "},{"title":"Images​","type":1,"pageTitle":"Markdown Features","url":"tutorial-basics/markdown-features#images","content":"Regular Markdown images are supported. Add an image at static/img/docusaurus.png and display it in Markdown: ![Docusaurus logo](/img/docusaurus.png) Copy  "},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Features","url":"tutorial-basics/markdown-features#code-blocks","content":"Markdown code blocks are supported with Syntax highlighting. ```jsx title=&quot;src/components/HelloDocusaurus.js&quot; function HelloDocusaurus() { return ( &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt; ) } ``` Copy src/components/HelloDocusaurus.js function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; } Copy "},{"title":"Admonitions​","type":1,"pageTitle":"Markdown Features","url":"tutorial-basics/markdown-features#admonitions","content":"Docusaurus has a special syntax to create admonitions and callouts: :::tip My tip Use this awesome feature option ::: :::danger Take care This action is dangerous ::: Copy My tip Use this awesome feature option Take care This action is dangerous "},{"title":"MDX and React Components​","type":1,"pageTitle":"Markdown Features","url":"tutorial-basics/markdown-features#mdx-and-react-components","content":"MDX can make your documentation more interactive and allows using any React components inside Markdown: export const Highlight = ({children, color}) =&gt; ( &lt;span style={{ backgroundColor: color, borderRadius: '20px', color: '#fff', padding: '10px', cursor: 'pointer', }} onClick={() =&gt; { alert(`You clicked the color ${color} with label ${children}`) }}&gt; {children} &lt;/span&gt; ); This is &lt;Highlight color=&quot;#25c2a0&quot;&gt;Docusaurus green&lt;/Highlight&gt; ! This is &lt;Highlight color=&quot;#1877F2&quot;&gt;Facebook blue&lt;/Highlight&gt; ! Copy This is Docusaurus green ! This is Facebook blue ! "}]